apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8ssecframework-deployment
  labels:
    app: k8ssecframework
spec:
  replicas: 2
  selector:
    matchLabels:
      app: k8ssecframework
  template:
    metadata:
      labels:
        app: k8ssecframework
    spec:
      securityContext:  # Pod-level security context
        fsGroup: 2000
        runAsNonRoot: true
      containers:
      - name: k8ssecframework
        image: x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:latest
        ports:
        - containerPort: 8081
        readinessProbe:
          httpGet:
            path: /hello
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /hello
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 15
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        securityContext:  # Container-level security context
          runAsUser: 1000
          runAsGroup: 3000
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
        env:  # Environment variables (add if needed for dynamic configuration)
        - name: APP_ENV
          value: "production"
        - name: APP_DEBUG
          value: "false"
      imagePullSecrets:
      - name: acr-secret
      tolerations:  # Ensure deployment is not affected by node taints
      - key: "node-role.kubernetes.io/control-plane"
        effect: NoSchedule
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      affinity:  # Add node affinity for better placement
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
