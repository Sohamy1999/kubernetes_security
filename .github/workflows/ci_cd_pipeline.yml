name: CI/CD Pipeline for Kubernetes Security Framework

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up kubectl using KUBECONFIG from secrets
      - name: Set Up kubectl
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context kubernetesSecurityCluster
          kubectl cluster-info

      # Validate Kubernetes context and connection
      - name: Validate Kubernetes Context
        run: |
          kubectl config get-contexts
          kubectl config current-context
          kubectl get nodes

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:latest .

      # Push Docker Image to Azure Container Registry
      - name: Push Docker Image to Azure Container Registry
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        run: |
          echo "${{ secrets.AZURE_PASSWORD }}" | docker login x23173394k8scontainerregistry.azurecr.io -u "${{ secrets.AZURE_USERNAME }}" --password-stdin
          docker push x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:latest

      # Run custom security scanning agent
      - name: Run Custom Security Scanning Agent
        run: python custom_scanner.py

      # Archive scan results
      - name: Archive Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: scan_results
          path: scan_results.json

      # Run adaptive policy enforcer
      - name: Run Adaptive Policy Enforcer
        run: python adaptive_policy_enforcer.py

      # Apply Kubernetes policies
      - name: Apply Kubernetes Policies
        run: |
          kubectl apply -f dynamic-policy.yaml -n default --validate=false
          sleep 10  # Wait for Kubernetes to process the policy
          kubectl get networkpolicy -n default
          kubectl describe networkpolicy allow-all-traffic -n default

      # Debug network policies
      - name: Debug Network Policies
        run: |
          kubectl get networkpolicy -A
          kubectl describe networkpolicy -n default

      # Check permissions
      - name: Verify Permissions
        run: |
          kubectl auth can-i create networkpolicy -n default
          kubectl auth can-i get networkpolicy -n default
