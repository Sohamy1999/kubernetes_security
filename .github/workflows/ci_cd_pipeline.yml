name: CI/CD Pipeline for Kubernetes Security Framework

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-scan-deploy:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Generate Unique Image Tag
        id: generate-tag
        run: echo "TAG=$(date +%Y%m%d%H%M%S)-${{ github.sha }}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:${{ env.TAG }} .

      - name: Push Docker Image to Azure Container Registry
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        run: |
          echo "${{ secrets.AZURE_PASSWORD }}" | docker login x23173394k8scontainerregistry.azurecr.io -u "${{ secrets.AZURE_USERNAME }}" --password-stdin
          docker push x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:${{ env.TAG }}

      - name: Pull and Validate Docker Image
        run: |
          docker pull x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:${{ env.TAG }}
          docker run --rm --entrypoint bash x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:${{ env.TAG }} -c "dpkg-query -W"

      - name: Update Deployment YAML with New Image Tag
        run: |
          sed -i "s|image: .*|image: x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:${{ env.TAG }}|" deployment.yaml

      - name: Run Custom Scanner
        run: |
          python custom_scanner.py

      - name: Enforce Adaptive Policies
        run: |
          python adaptive_policy_enforcer.py

      - name: Decode and Write Kubeconfig
        run: |
          printf "%s" "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig

      - name: Verify Kubectl Configuration
        run: |
          kubectl config view
          kubectl config current-context

      - name: Apply Kubernetes Policies
        run: |
          kubectl apply -f dynamic-policy.yaml

      - name: Apply Network Policy
        run: kubectl apply -f network-policy.yaml

      - name: Deploy Application
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify Applied Policies
        run: |
          echo "Verifying applied policies..."
          echo "Network Policies:"
          kubectl get networkpolicy -n default
          echo "Resource Quotas:"
          kubectl get resourcequota -n default
          echo "Namespace Labels:"
          kubectl get namespace default --show-labels
          echo "Pod Labels:"
          kubectl get pods -n default --show-labels

      - name: Retrieve Service External IP
        run: |
          EXTERNAL_IP=$(kubectl get service k8ssecframework-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Application is accessible at http://$EXTERNAL_IP:8082/hello"
