name: CI/CD Pipeline for Kubernetes Security Framework

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: ${{ github.workspace }}/kubeconfig

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Python
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:latest .

      # Push Docker Image to Azure Container Registry
      - name: Push Docker Image to Azure Container Registry
        env:
          AZURE_USERNAME: ${{ secrets.AZURE_USERNAME }}
          AZURE_PASSWORD: ${{ secrets.AZURE_PASSWORD }}
        run: |
          echo "${{ secrets.AZURE_PASSWORD }}" | docker login x23173394k8scontainerregistry.azurecr.io -u "${{ secrets.AZURE_USERNAME }}" --password-stdin
          docker push x23173394k8scontainerregistry.azurecr.io/kubernetes-security-framework:latest
          
      # Decode and Write Kubeconfig
      - name: Decode and Write Kubeconfig
        run: |
          printf "%s" "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig

      # Verify Kubectl Configuration
      - name: Verify Kubectl Configuration
        run: |
          kubectl config view
          kubectl config current-context

      # Test Kubernetes Connectivity
      - name: Test Kubernetes Connectivity
        run: |
          kubectl get nodes

      # Check for dynamic-policy.yaml
      - name: Check for dynamic-policy.yaml
        id: check-policy-file
        run: |
          if [ -f dynamic-policy.yaml ]; then
            echo "Policy file exists."
          else
            echo "Policy file does not exist. Creating default policy..."
            echo """
            apiVersion: networking.k8s.io/v1
            kind: NetworkPolicy
            metadata:
              name: allow-all-traffic
              namespace: default
            spec:
              podSelector: {}
              policyTypes:
              - Ingress
              - Egress
              ingress:
              - {}
              egress:
              - {}
            """ > dynamic-policy.yaml
          fi

      # Apply Kubernetes Policies
      - name: Apply Kubernetes Policies
        run: |
          kubectl apply -f dynamic-policy.yaml -n default --validate=false
          kubectl get networkpolicy -n default
